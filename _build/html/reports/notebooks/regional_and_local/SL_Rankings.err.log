Traceback (most recent call last):
  File "/opt/anaconda3/envs/SLI39/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/anaconda3/envs/SLI39/lib/python3.9/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/anaconda3/envs/SLI39/lib/python3.9/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/opt/anaconda3/envs/SLI39/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/opt/anaconda3/envs/SLI39/lib/python3.9/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/opt/anaconda3/envs/SLI39/lib/python3.9/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/anaconda3/envs/SLI39/lib/python3.9/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# # Define a function that returns styles for both 'Highest' and 'Lowest' based on respective ONI Modes
# # Normalize the ONI values
import matplotlib.colors as mcolors
norm = mcolors.Normalize(vmin=-3, vmax=3)

# Define the color maps
cmap = sns.color_palette('coolwarm', as_cmap=True)

def style_oni_based(row):
    styles = {}
    # Color for 'Highest' based on 'Highest ONI Mode'
    if row['Highest ONI Mode'] == 'El Nino':
        styles['Highest'] = f'background-color: {mcolors.rgb2hex(cmap(norm(row["ONI max"])))}'
    elif row['Highest ONI Mode'] == 'La Nina':
        styles['Highest'] = f'background-color: {mcolors.rgb2hex(cmap(norm(row["ONI min"])))}'
    else:
        styles['Highest'] = 'color: black'  # Neutral or undefined
    # Color for 'Lowest' based on 'Lowest ONI Mode'
    if row['Lowest ONI Mode'] == 'El Nino':
        styles['Lowest'] = f'background-color: {mcolors.rgb2hex(cmap(norm(row["ONI max"])))}'
    elif row['Lowest ONI Mode'] == 'La Nina':
        styles['Lowest'] = f'background-color: {mcolors.rgb2hex(cmap(norm(row["ONI min"])))}'
    else:
        styles['Lowest'] = 'color: black'  # Neutral or undefined
    return pd.Series(styles)    

# Define the table style
styles_col = [
    {'selector': 'th', 'props': [('border-bottom', '2px solid #000'), ('font-weight', 'bold'), ('text-align', 'center')]},
    {'selector': '.dataframe th:nth-child(3)', 'props': [('padding-right', '100px')]}]

# Apply the styling function to the DataFrame
top_10_d = top_10_display.style.\
                            apply(style_oni_based, axis=1).\
                            hide(subset=['Highest ONI Mode', 'Lowest ONI Mode','ONI max','ONI min'], axis=1).\
                            hide().\
                            set_table_attributes(styles_col)
# save table to output folder
top_10_display.to_csv(output_dir / tablename, index=False)

top_10_d
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[8], line 39[0m
[1;32m     33[0m top_10_d [38;5;241m=[39m top_10_display[38;5;241m.[39mstyle[38;5;241m.[39m\
[1;32m     34[0m                             apply(style_oni_based, axis[38;5;241m=[39m[38;5;241m1[39m)[38;5;241m.[39m\
[1;32m     35[0m                             hide(subset[38;5;241m=[39m[[38;5;124m'[39m[38;5;124mHighest ONI Mode[39m[38;5;124m'[39m, [38;5;124m'[39m[38;5;124mLowest ONI Mode[39m[38;5;124m'[39m,[38;5;124m'[39m[38;5;124mONI max[39m[38;5;124m'[39m,[38;5;124m'[39m[38;5;124mONI min[39m[38;5;124m'[39m], axis[38;5;241m=[39m[38;5;241m1[39m)[38;5;241m.[39m\
[1;32m     36[0m                             hide()[38;5;241m.[39m\
[1;32m     37[0m                             set_table_attributes(styles_col)
[1;32m     38[0m [38;5;66;03m# save table to output folder[39;00m
[0;32m---> 39[0m top_10_display[38;5;241m.[39mto_csv(output_dir [38;5;241m/[39m [43mtablename[49m, index[38;5;241m=[39m[38;5;28;01mFalse[39;00m)
[1;32m     41[0m top_10_d

[0;31mNameError[0m: name 'tablename' is not defined


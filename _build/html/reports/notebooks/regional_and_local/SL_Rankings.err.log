Traceback (most recent call last):
  File "/opt/anaconda3/envs/SLI39/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/anaconda3/envs/SLI39/lib/python3.9/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/anaconda3/envs/SLI39/lib/python3.9/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/opt/anaconda3/envs/SLI39/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/opt/anaconda3/envs/SLI39/lib/python3.9/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/opt/anaconda3/envs/SLI39/lib/python3.9/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/anaconda3/envs/SLI39/lib/python3.9/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# concatenate the top 10 values for each record
top_10_table_all = pd.concat([get_top_10_table(rsl_subset,rid) for rid in range(len(rsl_subset.record_id))])


# max_SL is all rank 1, with type max
max_SL = top_10_table_all[top_10_table_all['rank'] == 1 & (top_10_table_all['type'] == 'max')].copy()

# sort by record_id
max_SL = max_SL.sort_values('record_id')
rsl_subset = rsl_subset.sortby('record_id')

max_SL.loc[:, 'lat'] = rsl_subset['lat'].values
max_SL.loc[:, 'lon'] = rsl_subset['lon'].values



# min SL is all rank 1, with type min
min_SL = top_10_table_all[top_10_table_all['rank'] == 1 & (top_10_table_all['type'] == 'min')].copy()

# sort by record_id
min_SL = min_SL.sort_values('record_id')

min_SL.loc[:, 'lat'] = rsl_subset['lat'].values
min_SL.loc[:, 'lon'] = rsl_subset['lon'].values
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[12], line 2[0m
[1;32m      1[0m [38;5;66;03m# concatenate the top 10 values for each record[39;00m
[0;32m----> 2[0m top_10_table_all [38;5;241m=[39m [43mpd[49m[38;5;241;43m.[39;49m[43mconcat[49m[43m([49m[43m[[49m[43mget_top_10_table[49m[43m([49m[43mrsl_subset[49m[43m,[49m[43mrid[49m[43m)[49m[43m [49m[38;5;28;43;01mfor[39;49;00m[43m [49m[43mrid[49m[43m [49m[38;5;129;43;01min[39;49;00m[43m [49m[38;5;28;43mrange[39;49m[43m([49m[38;5;28;43mlen[39;49m[43m([49m[43mrsl_subset[49m[38;5;241;43m.[39;49m[43mrecord_id[49m[43m)[49m[43m)[49m[43m][49m[43m)[49m
[1;32m      5[0m [38;5;66;03m# max_SL is all rank 1, with type max[39;00m
[1;32m      6[0m max_SL [38;5;241m=[39m top_10_table_all[top_10_table_all[[38;5;124m'[39m[38;5;124mrank[39m[38;5;124m'[39m] [38;5;241m==[39m [38;5;241m1[39m [38;5;241m&[39m (top_10_table_all[[38;5;124m'[39m[38;5;124mtype[39m[38;5;124m'[39m] [38;5;241m==[39m [38;5;124m'[39m[38;5;124mmax[39m[38;5;124m'[39m)][38;5;241m.[39mcopy()

File [0;32m/opt/anaconda3/envs/SLI39/lib/python3.9/site-packages/pandas/core/reshape/concat.py:382[0m, in [0;36mconcat[0;34m(objs, axis, join, ignore_index, keys, levels, names, verify_integrity, sort, copy)[0m
[1;32m    379[0m [38;5;28;01melif[39;00m copy [38;5;129;01mand[39;00m using_copy_on_write():
[1;32m    380[0m     copy [38;5;241m=[39m [38;5;28;01mFalse[39;00m
[0;32m--> 382[0m op [38;5;241m=[39m [43m_Concatenator[49m[43m([49m
[1;32m    383[0m [43m    [49m[43mobjs[49m[43m,[49m
[1;32m    384[0m [43m    [49m[43maxis[49m[38;5;241;43m=[39;49m[43maxis[49m[43m,[49m
[1;32m    385[0m [43m    [49m[43mignore_index[49m[38;5;241;43m=[39;49m[43mignore_index[49m[43m,[49m
[1;32m    386[0m [43m    [49m[43mjoin[49m[38;5;241;43m=[39;49m[43mjoin[49m[43m,[49m
[1;32m    387[0m [43m    [49m[43mkeys[49m[38;5;241;43m=[39;49m[43mkeys[49m[43m,[49m
[1;32m    388[0m [43m    [49m[43mlevels[49m[38;5;241;43m=[39;49m[43mlevels[49m[43m,[49m
[1;32m    389[0m [43m    [49m[43mnames[49m[38;5;241;43m=[39;49m[43mnames[49m[43m,[49m
[1;32m    390[0m [43m    [49m[43mverify_integrity[49m[38;5;241;43m=[39;49m[43mverify_integrity[49m[43m,[49m
[1;32m    391[0m [43m    [49m[43mcopy[49m[38;5;241;43m=[39;49m[43mcopy[49m[43m,[49m
[1;32m    392[0m [43m    [49m[43msort[49m[38;5;241;43m=[39;49m[43msort[49m[43m,[49m
[1;32m    393[0m [43m[49m[43m)[49m
[1;32m    395[0m [38;5;28;01mreturn[39;00m op[38;5;241m.[39mget_result()

File [0;32m/opt/anaconda3/envs/SLI39/lib/python3.9/site-packages/pandas/core/reshape/concat.py:448[0m, in [0;36m_Concatenator.__init__[0;34m(self, objs, axis, join, keys, levels, names, ignore_index, verify_integrity, copy, sort)[0m
[1;32m    445[0m objs, keys [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_clean_keys_and_objs(objs, keys)
[1;32m    447[0m [38;5;66;03m# figure out what our result ndim is going to be[39;00m
[0;32m--> 448[0m ndims [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_get_ndims[49m[43m([49m[43mobjs[49m[43m)[49m
[1;32m    449[0m sample, objs [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_get_sample_object(objs, ndims, keys, names, levels)
[1;32m    451[0m [38;5;66;03m# Standardize axis parameter to int[39;00m

File [0;32m/opt/anaconda3/envs/SLI39/lib/python3.9/site-packages/pandas/core/reshape/concat.py:489[0m, in [0;36m_Concatenator._get_ndims[0;34m(self, objs)[0m
[1;32m    484[0m     [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m [38;5;28misinstance[39m(obj, (ABCSeries, ABCDataFrame)):
[1;32m    485[0m         msg [38;5;241m=[39m (
[1;32m    486[0m             [38;5;124mf[39m[38;5;124m"[39m[38;5;124mcannot concatenate object of type [39m[38;5;124m'[39m[38;5;132;01m{[39;00m[38;5;28mtype[39m(obj)[38;5;132;01m}[39;00m[38;5;124m'[39m[38;5;124m; [39m[38;5;124m"[39m
[1;32m    487[0m             [38;5;124m"[39m[38;5;124monly Series and DataFrame objs are valid[39m[38;5;124m"[39m
[1;32m    488[0m         )
[0;32m--> 489[0m         [38;5;28;01mraise[39;00m [38;5;167;01mTypeError[39;00m(msg)
[1;32m    491[0m     ndims[38;5;241m.[39madd(obj[38;5;241m.[39mndim)
[1;32m    492[0m [38;5;28;01mreturn[39;00m ndims

[0;31mTypeError[0m: cannot concatenate object of type '<class 'tuple'>'; only Series and DataFrame objs are valid


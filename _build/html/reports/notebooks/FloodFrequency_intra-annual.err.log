Traceback (most recent call last):
  File "/opt/anaconda3/envs/SLI39/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/anaconda3/envs/SLI39/lib/python3.9/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/anaconda3/envs/SLI39/lib/python3.9/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/opt/anaconda3/envs/SLI39/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/opt/anaconda3/envs/SLI39/lib/python3.9/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/opt/anaconda3/envs/SLI39/lib/python3.9/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/anaconda3/envs/SLI39/lib/python3.9/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
#make a pretty pdf of the table with great_tables
from great_tables import GT,html

dfGT = df.copy()
dfGT['year'] = df.index

# put the year column first
cols = dfGT.columns.tolist()
cols = cols[-1:] + cols[:-1]
dfGT = dfGT[cols]
dfGT.reset_index(drop=True, inplace=True)



# Create a GreatTable object
table = (GT(dfGT)
.fmt_number(columns=calendar.month_abbr[1:13], decimals=0)
.fmt_number(columns=['Annual'], decimals=0)
.tab_header(title = 'Days Exceeding 30 cm above MHHW', subtitle = station_name)
.data_color(domain = [0,30],
            columns=calendar.month_abbr[1:13],
            rows = list(range(len(dfGT)-1)),
            palette=["white", "lightblue"])
.data_color(domain = [0,30],
            columns=calendar.month_abbr[1:13],
            rows = [-1],
            palette=["white", "purple"])
)

# save table as png
tableName = station_name + '_flood_days_intra_annual.png'
savePath = os.path.join(output_dir, tableName)

# replace any commas or spaces with underscores
savePath = savePath.replace(' ', '_')
table.save(savePath)

# Load Image
from IPython.display import Image
imgTable = Image(filename=savePath)

# Glue the image with a name
glue("imgTable", imgTable, display=False)


------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mTypeError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[4], line 16[0m
[1;32m     11[0m dfGT[38;5;241m.[39mreset_index(drop[38;5;241m=[39m[38;5;28;01mTrue[39;00m, inplace[38;5;241m=[39m[38;5;28;01mTrue[39;00m)
[1;32m     15[0m [38;5;66;03m# Create a GreatTable object[39;00m
[0;32m---> 16[0m table [38;5;241m=[39m ([43mGT[49m[43m([49m[43mdfGT[49m[43m)[49m
[1;32m     17[0m [38;5;241;43m.[39;49m[43mfmt_number[49m[43m([49m[43mcolumns[49m[38;5;241;43m=[39;49m[43mcalendar[49m[38;5;241;43m.[39;49m[43mmonth_abbr[49m[43m[[49m[38;5;241;43m1[39;49m[43m:[49m[38;5;241;43m13[39;49m[43m][49m[43m,[49m[43m [49m[43mdecimals[49m[38;5;241;43m=[39;49m[38;5;241;43m0[39;49m[43m)[49m
[1;32m     18[0m [38;5;241;43m.[39;49m[43mfmt_number[49m[43m([49m[43mcolumns[49m[38;5;241;43m=[39;49m[43m[[49m[38;5;124;43m'[39;49m[38;5;124;43mAnnual[39;49m[38;5;124;43m'[39;49m[43m][49m[43m,[49m[43m [49m[43mdecimals[49m[38;5;241;43m=[39;49m[38;5;241;43m0[39;49m[43m)[49m
[1;32m     19[0m [38;5;241;43m.[39;49m[43mtab_header[49m[43m([49m[43mtitle[49m[43m [49m[38;5;241;43m=[39;49m[43m [49m[38;5;124;43m'[39;49m[38;5;124;43mDays Exceeding 30 cm above MHHW[39;49m[38;5;124;43m'[39;49m[43m,[49m[43m [49m[43msubtitle[49m[43m [49m[38;5;241;43m=[39;49m[43m [49m[43mstation_name[49m[43m)[49m
[1;32m     20[0m [38;5;241;43m.[39;49m[43mdata_color[49m[43m([49m[43mdomain[49m[43m [49m[38;5;241;43m=[39;49m[43m [49m[43m[[49m[38;5;241;43m0[39;49m[43m,[49m[38;5;241;43m30[39;49m[43m][49m[43m,[49m
[1;32m     21[0m [43m            [49m[43mcolumns[49m[38;5;241;43m=[39;49m[43mcalendar[49m[38;5;241;43m.[39;49m[43mmonth_abbr[49m[43m[[49m[38;5;241;43m1[39;49m[43m:[49m[38;5;241;43m13[39;49m[43m][49m[43m,[49m
[1;32m     22[0m [43m            [49m[43mrows[49m[43m [49m[38;5;241;43m=[39;49m[43m [49m[38;5;28;43mlist[39;49m[43m([49m[38;5;28;43mrange[39;49m[43m([49m[38;5;28;43mlen[39;49m[43m([49m[43mdfGT[49m[43m)[49m[38;5;241;43m-[39;49m[38;5;241;43m1[39;49m[43m)[49m[43m)[49m[43m,[49m
[1;32m     23[0m [43m            [49m[43mpalette[49m[38;5;241;43m=[39;49m[43m[[49m[38;5;124;43m"[39;49m[38;5;124;43mwhite[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43mlightblue[39;49m[38;5;124;43m"[39;49m[43m][49m[43m)[49m
[1;32m     24[0m [38;5;241m.[39mdata_color(domain [38;5;241m=[39m [[38;5;241m0[39m,[38;5;241m30[39m],
[1;32m     25[0m             columns[38;5;241m=[39mcalendar[38;5;241m.[39mmonth_abbr[[38;5;241m1[39m:[38;5;241m13[39m],
[1;32m     26[0m             rows [38;5;241m=[39m [[38;5;241m-[39m[38;5;241m1[39m],
[1;32m     27[0m             palette[38;5;241m=[39m[[38;5;124m"[39m[38;5;124mwhite[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mpurple[39m[38;5;124m"[39m])
[1;32m     28[0m )
[1;32m     30[0m [38;5;66;03m# save table as png[39;00m
[1;32m     31[0m tableName [38;5;241m=[39m station_name [38;5;241m+[39m [38;5;124m'[39m[38;5;124m_flood_days_intra_annual.png[39m[38;5;124m'[39m

[0;31mTypeError[0m: data_color() got an unexpected keyword argument 'rows'


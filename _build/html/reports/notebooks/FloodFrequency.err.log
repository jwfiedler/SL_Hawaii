Traceback (most recent call last):
  File "/Users/juliafiedler/anaconda3/envs/SLI39/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/juliafiedler/anaconda3/envs/SLI39/lib/python3.9/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/juliafiedler/anaconda3/envs/SLI39/lib/python3.9/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/Users/juliafiedler/anaconda3/envs/SLI39/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/Users/juliafiedler/anaconda3/envs/SLI39/lib/python3.9/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/Users/juliafiedler/anaconda3/envs/SLI39/lib/python3.9/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/juliafiedler/anaconda3/envs/SLI39/lib/python3.9/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# take only a subset of the data: Hilo, Kawaihae, Kahului, Mokuoloe, Honolulu, Nawiliwili, Johnston and Midway Island
subset = rsl.sel(record_id=[500,520,570,580,590,600,610,5520])

subset = subset.sortby('lat')

fig, ax = plt.subplots(sharex=True, figsize=(10, 10))
fig.autofmt_xdate()
# ax.plot(rsl.time.values,rsl.sea_level_MHHW.T.values/10)
# ax.set_ylabel(rsl['sea_level_MHHW'].long_name) #divide by 10 to convert to cm
# # add legend to bottom of plot
# ax.legend(rsl['station_name'].values, bbox_to_anchor=(0.5, -0.2), loc='upper center', ncol=3)  
# Initial offset
offset = 0
# The amount to offset each successive line
offset_increment = 150  # Adjust this value based on your data scale and visual preference

for i, record_id in enumerate(subset['record_id'].values):
    # Extract the series for this station
    sea_level_data = subset.sea_level_MHHW.isel(record_id=i).values / 10  # Convert to cm
    # Plot, adding the offset
    #add horizontal line for each station
    ax.axhline(offset, color='black', linewidth=0.5, linestyle=':')
    ax.plot(subset.time.values, sea_level_data + offset, label=subset['station_name'].values[i])
    ax.text(subset.time.values[0], offset-20, subset['station_name'].values[i], color='black', fontsize=10, ha='left', va='top')
    # Increment the offset for the next series
    offset += offset_increment

ax.set_ylabel(subset['sea_level_MHHW'].long_name + ' (cm, offset by 150cm per station)')
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mKeyError[0m                                  Traceback (most recent call last)
Cell [0;32mIn[8], line 2[0m
[1;32m      1[0m [38;5;66;03m# take only a subset of the data: Hilo, Kawaihae, Kahului, Mokuoloe, Honolulu, Nawiliwili, Johnston and Midway Island[39;00m
[0;32m----> 2[0m subset [38;5;241m=[39m [43mrsl[49m[38;5;241;43m.[39;49m[43msel[49m[43m([49m[43mrecord_id[49m[38;5;241;43m=[39;49m[43m[[49m[38;5;241;43m500[39;49m[43m,[49m[38;5;241;43m520[39;49m[43m,[49m[38;5;241;43m570[39;49m[43m,[49m[38;5;241;43m580[39;49m[43m,[49m[38;5;241;43m590[39;49m[43m,[49m[38;5;241;43m600[39;49m[43m,[49m[38;5;241;43m610[39;49m[43m,[49m[38;5;241;43m5520[39;49m[43m][49m[43m)[49m
[1;32m      4[0m subset [38;5;241m=[39m subset[38;5;241m.[39msortby([38;5;124m'[39m[38;5;124mlat[39m[38;5;124m'[39m)
[1;32m      6[0m fig, ax [38;5;241m=[39m plt[38;5;241m.[39msubplots(sharex[38;5;241m=[39m[38;5;28;01mTrue[39;00m, figsize[38;5;241m=[39m([38;5;241m10[39m, [38;5;241m10[39m))

File [0;32m~/anaconda3/envs/SLI39/lib/python3.9/site-packages/xarray/core/dataset.py:3074[0m, in [0;36mDataset.sel[0;34m(self, indexers, method, tolerance, drop, **indexers_kwargs)[0m
[1;32m   3006[0m [38;5;250m[39m[38;5;124;03m"""Returns a new dataset with each array indexed by tick labels[39;00m
[1;32m   3007[0m [38;5;124;03malong the specified dimension(s).[39;00m
[1;32m   3008[0m 
[0;32m   (...)[0m
[1;32m   3071[0m 
[1;32m   3072[0m [38;5;124;03m"""[39;00m
[1;32m   3073[0m indexers [38;5;241m=[39m either_dict_or_kwargs(indexers, indexers_kwargs, [38;5;124m"[39m[38;5;124msel[39m[38;5;124m"[39m)
[0;32m-> 3074[0m query_results [38;5;241m=[39m [43mmap_index_queries[49m[43m([49m
[1;32m   3075[0m [43m    [49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43mindexers[49m[38;5;241;43m=[39;49m[43mindexers[49m[43m,[49m[43m [49m[43mmethod[49m[38;5;241;43m=[39;49m[43mmethod[49m[43m,[49m[43m [49m[43mtolerance[49m[38;5;241;43m=[39;49m[43mtolerance[49m
[1;32m   3076[0m [43m[49m[43m)[49m
[1;32m   3078[0m [38;5;28;01mif[39;00m drop:
[1;32m   3079[0m     no_scalar_variables [38;5;241m=[39m {}

File [0;32m~/anaconda3/envs/SLI39/lib/python3.9/site-packages/xarray/core/indexing.py:193[0m, in [0;36mmap_index_queries[0;34m(obj, indexers, method, tolerance, **indexers_kwargs)[0m
[1;32m    191[0m         results[38;5;241m.[39mappend(IndexSelResult(labels))
[1;32m    192[0m     [38;5;28;01melse[39;00m:
[0;32m--> 193[0m         results[38;5;241m.[39mappend([43mindex[49m[38;5;241;43m.[39;49m[43msel[49m[43m([49m[43mlabels[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43moptions[49m[43m)[49m)
[1;32m    195[0m merged [38;5;241m=[39m merge_sel_results(results)
[1;32m    197[0m [38;5;66;03m# drop dimension coordinates found in dimension indexers[39;00m
[1;32m    198[0m [38;5;66;03m# (also drop multi-index if any)[39;00m
[1;32m    199[0m [38;5;66;03m# (.sel() already ensures alignment)[39;00m

File [0;32m~/anaconda3/envs/SLI39/lib/python3.9/site-packages/xarray/core/indexes.py:784[0m, in [0;36mPandasIndex.sel[0;34m(self, labels, method, tolerance)[0m
[1;32m    782[0m     indexer [38;5;241m=[39m get_indexer_nd([38;5;28mself[39m[38;5;241m.[39mindex, label_array, method, tolerance)
[1;32m    783[0m     [38;5;28;01mif[39;00m np[38;5;241m.[39many(indexer [38;5;241m<[39m [38;5;241m0[39m):
[0;32m--> 784[0m         [38;5;28;01mraise[39;00m [38;5;167;01mKeyError[39;00m([38;5;124mf[39m[38;5;124m"[39m[38;5;124mnot all values found in index [39m[38;5;132;01m{[39;00mcoord_name[38;5;132;01m!r}[39;00m[38;5;124m"[39m)
[1;32m    786[0m [38;5;66;03m# attach dimension names and/or coordinates to positional indexer[39;00m
[1;32m    787[0m [38;5;28;01mif[39;00m [38;5;28misinstance[39m(label, Variable):

[0;31mKeyError[0m: "not all values found in index 'record_id'"

